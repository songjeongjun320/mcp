# Default values for mcp-server Helm chart
# This is a YAML-formatted file for configuration values

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# MCP Server configuration
mcpServer:
  # Image configuration
  image:
    registry: docker.io
    repository: mcp/server
    tag: "1.0.0"
    digest: ""
    pullPolicy: IfNotPresent

  # Deployment configuration
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

  # Container configuration
  containerPort: 10000
  command: []
  args: []

  # Resource allocation
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 256Mi

  # Horizontal Pod Autoscaling
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 10
          periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
        - type: Percent
          value: 25
          periodSeconds: 60

  # Vertical Pod Autoscaling
  vpa:
    enabled: false
    updateMode: "Auto"

  # Pod Disruption Budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2

  # Environment variables
  env:
    MCP_LOG_LEVEL: INFO
    MCP_METRICS_ENABLED: "true"
    MCP_HEALTH_CHECK_ENABLED: "true"
    PYTHONUNBUFFERED: "1"
    PORT: "10000"

  # Environment variables from secrets
  envFrom:
    - secretRef:
        name: mcp-server-secrets
    - configMapRef:
        name: mcp-server-config

  # Health checks
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    enabled: true
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  startupProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  # Security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault

  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL

  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - mcp-server
          topologyKey: kubernetes.io/hostname

  # Volume mounts
  volumeMounts:
    - name: tmp-volume
      mountPath: /tmp
    - name: cache-volume
      mountPath: /app/cache

  volumes:
    - name: tmp-volume
      emptyDir: {}
    - name: cache-volume
      emptyDir:
        sizeLimit: 1Gi

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: http
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: mcp.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mcp-server-tls
      hosts:
        - mcp.yourdomain.com

# Load Balancer (if using cloud provider)
loadBalancer:
  enabled: false
  annotations: {}
  # AWS example:
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
  #   service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

# Configuration management
configMap:
  enabled: true
  data:
    message: "Production Kubernetes deployment"

# Secrets management
secrets:
  enabled: true
  # These will be created from external secret manager or manually
  external:
    enabled: true
    secretStore: "vault-secret-store"
    refreshInterval: "1h"
  
  # Manual secrets (for development)
  manual:
    enabled: false
    data: {}
      # SUPABASE_URL: ""
      # SUPABASE_ANON_KEY: ""
      # organization_id: ""

# Service Monitor (Prometheus)
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels:
    app.kubernetes.io/name: mcp-server
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  targetLabels:
    - app.kubernetes.io/name

# Pod Monitor (Alternative to Service Monitor)
podMonitor:
  enabled: false

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 10000
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 10000
  egress:
    # Allow DNS
    - to: []
      ports:
      - protocol: UDP
        port: 53
    # Allow HTTPS to external services (Supabase, etc.)
    - to: []
      ports:
      - protocol: TCP
        port: 443
    # Allow connections to Redis
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: redis
      ports:
      - protocol: TCP
        port: 6379

# Redis configuration
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: ""
  master:
    persistence:
      enabled: true
      size: 8Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
  grafana:
    enabled: true
    adminPassword: ""
  loki:
    enabled: true

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "30d"

# Testing
tests:
  enabled: true
  image:
    repository: busybox
    tag: "1.35"