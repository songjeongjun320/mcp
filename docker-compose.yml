# Docker Compose for MCP Server Development Environment
version: '3.8'

services:
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: mcp-server-dev
    restart: unless-stopped
    ports:
      - "${MCP_PORT:-10000}:10000"
    environment:
      - PORT=10000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - organization_id=${ORGANIZATION_ID}
      - message=${MESSAGE:-Development environment}
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-DEBUG}
      - MCP_METRICS_ENABLED=true
      - MCP_HEALTH_CHECK_ENABLED=true
      - PYTHONUNBUFFERED=1
    volumes:
      - mcp-logs:/app/logs
      - mcp-cache:/app/cache
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - prometheus
      - grafana

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.3
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - mcp-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health && echo 'ready'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Management
  loki:
    image: grafana/loki:2.9.0
    container_name: mcp-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mcp-network

  promtail:
    image: grafana/promtail:2.9.0
    container_name: mcp-promtail
    restart: unless-stopped
    volumes:
      - mcp-logs:/var/log/mcp:ro
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - mcp-network
    depends_on:
      - loki

  # Redis for caching (optional performance enhancement)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load testing service (for development)
  loadtest:
    image: williamyeh/wrk
    container_name: mcp-loadtest
    profiles: ["testing"]
    command: >
      sh -c "sleep 60 && wrk -t12 -c400 -d30s --timeout 30s 
             -H 'Content-Type: application/json' 
             http://mcp-server:10000/health"
    networks:
      - mcp-network
    depends_on:
      - mcp-server

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mcp-logs:
    driver: local
  mcp-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  redis-data:
    driver: local