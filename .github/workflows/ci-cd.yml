# CI/CD Pipeline for MCP Server
name: MCP Server CI/CD

on:
  push:
    branches: [ main, develop, 'release/**', 'hotfix/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip tests)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  # Code quality and security checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint black isort mypy bandit safety

    - name: Code formatting with Black
      run: black --check --diff .

    - name: Import sorting with isort
      run: isort --check-only --diff .

    - name: Lint with pylint
      run: pylint **/*.py --fail-under=8.0 --output-format=colorized

    - name: Type checking with mypy
      run: mypy . --ignore-missing-imports

    - name: Security scan with bandit
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json || true

    - name: Generate version
      id: version
      run: |
        if [[ ${{ github.ref }} == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=dev-${GITHUB_SHA::8}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Create test environment file
      run: |
        echo "SUPABASE_URL=https://test.supabase.co" >> .env.test
        echo "SUPABASE_ANON_KEY=test-key" >> .env.test
        echo "organization_id=test-org" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
      env:
        ENV_FILE: .env.test

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov-append --cov=. --cov-report=xml
      env:
        ENV_FILE: .env.test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Build and push container image
  build:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.imageuri }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_VERSION=${{ needs.code-quality.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Scan container image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.code-quality.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          sbom.spdx.json
          trivy-results.sarif

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, test, build]
    if: |
      (github.ref == 'refs/heads/develop' || 
       github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'staging') &&
      !cancelled() && !failure()
    environment:
      name: staging
      url: https://mcp-staging.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

    - name: Deploy with Helm
      run: |
        helm upgrade --install mcp-server-staging ./k8s/helm/mcp-server \
          --namespace mcp-staging \
          --create-namespace \
          --set mcpServer.image.tag=${{ needs.code-quality.outputs.version }} \
          --set mcpServer.env.MCP_LOG_LEVEL=DEBUG \
          --set ingress.hosts[0].host=mcp-staging.yourdomain.com \
          --set secrets.manual.enabled=true \
          --set secrets.manual.data.SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }} \
          --set secrets.manual.data.SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }} \
          --set secrets.manual.data.organization_id=${{ secrets.STAGING_ORGANIZATION_ID }} \
          --timeout 10m \
          --wait

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/mcp-server-staging -n mcp-staging --timeout=600s
        kubectl get pods -n mcp-staging -l app.kubernetes.io/name=mcp-server

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        curl -f https://mcp-staging.yourdomain.com/health || exit 1

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, deploy-staging]
    if: |
      (github.ref == 'refs/heads/main' || 
       startsWith(github.ref, 'refs/tags/v') ||
       github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'production') &&
      !cancelled() && !failure()
    environment:
      name: production
      url: https://mcp.yourdomain.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: Deploy with Helm (Blue-Green)
      run: |
        # Get current deployment color
        CURRENT_COLOR=$(kubectl get service mcp-server-production -n mcp-production -o jsonpath='{.spec.selector.deployment-color}' || echo "blue")
        NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
        
        echo "Deploying to $NEW_COLOR environment"
        
        helm upgrade --install mcp-server-production-$NEW_COLOR ./k8s/helm/mcp-server \
          --namespace mcp-production \
          --create-namespace \
          --set nameOverride=mcp-server-$NEW_COLOR \
          --set mcpServer.image.tag=${{ needs.code-quality.outputs.version }} \
          --set mcpServer.env.MCP_LOG_LEVEL=INFO \
          --set ingress.enabled=false \
          --set service.type=ClusterIP \
          --set secrets.external.enabled=true \
          --set secrets.external.secretStore=vault-secret-store \
          --timeout 15m \
          --wait

    - name: Verify new deployment
      run: |
        CURRENT_COLOR=$(kubectl get service mcp-server-production -n mcp-production -o jsonpath='{.spec.selector.deployment-color}' || echo "blue")
        NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
        
        kubectl rollout status deployment/mcp-server-$NEW_COLOR -n mcp-production --timeout=600s
        
        # Health check on new deployment
        NEW_POD_IP=$(kubectl get pod -n mcp-production -l app.kubernetes.io/name=mcp-server-$NEW_COLOR -o jsonpath='{.items[0].status.podIP}')
        kubectl run health-check-$NEW_COLOR --rm -it --restart=Never --image=curlimages/curl -- curl -f http://$NEW_POD_IP:10000/health

    - name: Switch traffic to new deployment
      run: |
        CURRENT_COLOR=$(kubectl get service mcp-server-production -n mcp-production -o jsonpath='{.spec.selector.deployment-color}' || echo "blue")
        NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
        
        echo "Switching traffic from $CURRENT_COLOR to $NEW_COLOR"
        
        kubectl patch service mcp-server-production -n mcp-production -p '{"spec":{"selector":{"deployment-color":"'$NEW_COLOR'"}}}'
        
        # Wait for traffic switch
        sleep 30
        
        # Final health check
        curl -f https://mcp.yourdomain.com/health || exit 1

    - name: Cleanup old deployment
      run: |
        CURRENT_COLOR=$(kubectl get service mcp-server-production -n mcp-production -o jsonpath='{.spec.selector.deployment-color}')
        OLD_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
        
        echo "Cleaning up old deployment: $OLD_COLOR"
        helm uninstall mcp-server-production-$OLD_COLOR -n mcp-production || true

  # Security and compliance scanning
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan on container
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-uri }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

    - name: Kubernetes security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: './k8s'
        format: 'sarif'
        output: 'k8s-security.sarif'

    - name: Upload K8s security results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'k8s-security.sarif'

  # Performance testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && !cancelled() && !failure()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        cat << 'EOF' > performance-test.js
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export const options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 50 },
            { duration: '2m', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<500'],
            http_req_failed: ['rate<0.1'],
          },
        };
        
        export default function () {
          const response = http.get('https://mcp-staging.yourdomain.com/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF
        
        k6 run performance-test.js --out json=performance-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json